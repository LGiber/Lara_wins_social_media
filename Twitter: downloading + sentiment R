library(devtools)
devtools::install_version("httr", version="1.0.0", repos="http://cran.us.r-project.org")
library(httr)
library(devtools)
library(twitteR)

#install the necessary packages
install.packages("twitteR")
install.packages("wordcloud")
install.packages("tm")
install.packages("ROAuth")
install.packages("base64enc")

library("twitteR")
library("wordcloud")
library("tm")
library("ROAuth")
library("base64enc")

#necessary file for Windows
download.file(url="http://curl.haxx.se/ca/cacert.pem ", destfile="cacert.pem")

#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
consumer_key <- 'nF0LIFs4RpN7Ik90vngJRUe40'
consumer_secret <- 'hyepRYex3ZlKVf8j4pwdYOeD8PvBTMGOFcOApev0QQuwdGmfmS'
access_token <- '213995172-Un1yzZGj8Geq693JTGLOGvsRHNdtsnNLeIMnCyVK'
access_secret <- 'PfwivqpYz7tXGHnPhn9Y7KPDUIXGJ0bBtOMqYDtQfIM7T'


setup_twitter_oauth(consumer_key, consumer_secret, access_token,access_secret)

devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")

library("twitteR")
setup_twitter_oauth(consumer_key, consumer_secret, access_token,access_secret)

library(httr)
setup_twitter_oauth(consumer_key, consumer_secret, access_token,access_secret)
setup_twitter_oauth(consumer_key, consumer_secret, access_token=NULL, access_secret=NULL)



tweets_Obama = searchTwitter("@BarackObama",n=5000)
length(tweets_Obama)
#[1] 5000

?searchTwitter

tweets_Cameron = searchTwitter("@David_Cameron",n=5000)
length(tweets_Cameron)
#[1] 5000

#save text

tweets.text.Obama = sapply(tweets_Obama, function(t)t$getText())
tweets.text.Cameron = sapply(tweets_Cameron, function(t)t$getText())

#create corpus

text_corpus_Obama <- Corpus(VectorSource(tweets.text.Obama))
text_corpus_Cameron <- Corpus(VectorSource(tweets.text.Cameron))

#clean up

text_corpus_Obama <- tm_map(text_corpus_Obama, content_transformer(tolower)) 
text_corpus_Obama <- tm_map(text_corpus_Obama, removePunctuation)
text_corpus_Obama <- tm_map(text_corpus_Obama, function(x)removeWords(x,stopwords()))

text_corpus_Cameron <- tm_map(text_corpus_Cameron, content_transformer(tolower)) 
text_corpus_Cameron <- tm_map(text_corpus_Cameron, removePunctuation)
text_corpus_Cameron <- tm_map(text_corpus_Cameron, function(x)removeWords(x,stopwords()))


#create word clouds for each page


wordcloud(text_corpus_Obama)
library(RColorBrewer)
pal2 <- brewer.pal(8,"Dark2")
wordcloud(text_corpus_Obama,min.freq=50,max.words=200, random.order=T, colors=pal2)

pal2 <- brewer.pal(8,"Dark2")
wordcloud(text_corpus_Cameron,min.freq=50,max.words=200, random.order=T, colors=pal2)


#sentiment analysis 

install.packages("stringr")
library("stringr")

install.packages("plyr")
library(plyr)

library(stringr)


pos.words = scan('C:/Users/home/Desktop/sentiment.r/positive-words.txt', what='character', comment.char=';')

neg.words = scan('C:/Users/home/Desktop/sentiment.r/negative-words.txt', what='character', comment.char=';')

source('C:/Users/home/Desktop/sentiment.r/sentiment.r')


score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
  require(plyr)
  require(stringr)
  
  # we got a vector of sentences. plyr will handle a list or a vector as an "l" for us
  # we want a simple array of scores back, so we use "l" + "a" + "ply" = laply:
  scores = laply(sentences, function(sentence, pos.words, neg.words) {
    
    # clean up sentences with R's regex-driven global substitute, gsub():
    sentence = gsub('[[:punct:]]', '', sentence)
    sentence = gsub('[[:cntrl:]]', '', sentence)
    sentence = gsub('\\d+', '', sentence)
    # and convert to lower case:
    sentence = tolower(sentence)
    
    # split into words. str_split is in the stringr package
    word.list = str_split(sentence, '\\s+')
    # sometimes a list() is one level of hierarchy too much
    words = unlist(word.list)
    
    
    
    # compare our words to the dictionaries of positive & negative terms
    pos.matches = match(words, pos.words)
    neg.matches = match(words, neg.words)
    
    # match() returns the position of the matched term or NA
    # we just want a TRUE/FALSE:
    pos.matches = !is.na(pos.matches)
    neg.matches = !is.na(neg.matches)
    
    # and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
    score = sum(pos.matches) - sum(neg.matches)
    
    return(score)
  }, pos.words, neg.words, .progress=.progress )
  
  scores.df = data.frame(score=scores, text=sentences)
  return(scores.df)
}

analysis = score.sentiment(tweets.text.Obama, pos.words, neg.words) 
table(analysis$score)
usableTextObama=str_replace_all(tweets.text.Obama,"[^[:graph:]]", " ") 
analysis.Obama = score.sentiment(usableTextObama, pos.words, neg.words)

usableTextCameron=str_replace_all(tweets.text.Cameron,"[^[:graph:]]", " ")
analysis.Cameron = score.sentiment(usableTextCameron, pos.words, neg.words)


table(analysis.Obama$score)
table(analysis.Cameron$score)

mean(analysis.Obama$score)
#-0.029
mean(analysis.Cameron$score)
#-0.15

hist(analysis.Obama$score)
hist(analysis.Cameron$score)
